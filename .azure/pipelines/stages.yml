# Param√®tre d'entr√©e : environnement cible (ex: dev, prd)
parameters: 
  env: dev

# D√©finition des stages de la pipeline
stages:
  # === STAGE 0 : VALIDATE ===
  - stage: validate_${{ parameters.env }}
    displayName: Valider la configuration Terraform (${{ parameters.env }})
    dependsOn: []
    variables:
      - group: infracloud
    jobs:
      - job: Validate
        displayName: Terraform validate
        steps:
          # Optionnel : installe une version connue de Terraform
          - task: TerraformInstaller@1
            displayName: "Install Terraform"
            inputs:
              terraformVersion: '1.5.7'

          # (Facultatif mais utile) garder l'acc√®s pour r√©cup√©rer des modules priv√©s ADO si besoin
          - checkout: self
            persistCredentials: true

          # V√©rif formatage + init sans backend + validate
          - task: AzureCLI@2
            displayName: "terraform fmt + init (no-backend) + validate"
            inputs:
              scriptType: bash
              scriptLocation: inlineScript
              addSpnToEnvironment: false
              inlineScript: |
                set -euo pipefail

                echo "üßπ terraform fmt -check"
                terraform fmt -check -recursive

                echo "üîß terraform init (no backend)"
                terraform init -backend=false -input=false

                echo "‚úÖ terraform validate"
                terraform validate

                # (Optionnel) tflint / tfsec / checkov si tu veux pousser la qualit√© :
                # curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
                # tflint --init && tflint --recursive
                # curl -sSL https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install.sh | bash
                # tfsec .

  # === STAGE 1 : PLAN ===
  - stage: plan_${{ parameters.env }}
    dependsOn: []  # Ce stage n‚Äôa pas de d√©pendance, il peut s‚Äôex√©cuter directement
    displayName: G√©n√©rer le plan Terraform pour ${{ parameters.env }}
    
    # Variables group√©es dans Azure DevOps (group infracloud)
    variables: 
      - group: infracloud

    jobs:
      - job: Plan
        steps:

        # √âtape 1 : Initialisation de Terraform avec Azure CLI (authentification OIDC)
        - task: AzureCLI@2
          displayName: "Terraform Init in ${{ parameters.env }}"
          inputs:
            azureSubscription: "man-az-we-exemple-${{ parameters.env }}-sp-provision"
            scriptType: bash
            scriptLocation: inlineScript
            addSpnToEnvironment: true
            inlineScript: |
              # Configuration de l'authentification OIDC
              echo "üîê Configuration de l'authentification avec OIDC"
              export ARM_CLIENT_ID=$servicePrincipalId
              export ARM_OIDC_TOKEN=$idToken
              export ARM_TENANT_ID=$tenantId
              export ARM_SUBSCRIPTION_ID=$(kv-subscription-${{ parameters.env }})
              export ARM_USE_OIDC=true

              # Injection dynamique de la Subscription ID dans le provider
              sed -i "s/__SUBSCRIPTIONID__/$(kv-subscription-${{ parameters.env }})/" providers.tf

              # Authentification Git pour r√©cup√©rer les modules Terraform si besoin
              git config --global http.https://exemple@dev.azure.com.extraheader "AUTHORIZATION: bearer $(System.AccessToken)"

              # Initialisation de Terraform avec le backend distant
              terraform init -backend-config="backend/${{ parameters.env }}.conf"

              # Nettoyage de la config Git
              git config --global --unset-all http.https://exemple@dev.azure.com.extraheader

        # √âtape 2 : Ex√©cution du plan Terraform
        - task: TerraformTaskV4@4
          displayName: "Terraform Plan in ${{ parameters.env }}"
          inputs:
            provider: 'azurerm'
            command: 'plan'
            commandOptions: '-var-file="vars/${{ parameters.env }}.tfvars" -out=${{ parameters.env }}.tfplan -input=false'
            environmentServiceNameAzureRM: "man-az-we-exemple-${{ parameters.env }}-sp-provision"

  # === STAGE 2 : APPLY ===
  - stage: apply_${{ parameters.env }}
    displayName: D√©ploiement Terraform vers ${{ parameters.env }}
    
    variables:
      - group: infracloud

    jobs:
      - deployment: Apply
        environment:
          name: exemple-${{ parameters.env }}  # Environnement Azure DevOps (utile pour les approbations)
        displayName: "Terraform Apply"
        strategy:
          runOnce:
            deploy:
              steps:

                # √âtape unique : application du plan Terraform
                - task: TerraformTaskV4@4
                  displayName: "Terraform Apply in ${{ parameters.env }}"
                  inputs:
                    provider: 'azurerm'
                    command: 'apply'
                    commandOptions: '${{ parameters.env }}.tfplan'
                    environmentServiceNameAzureRM: "man-az-we-exemple-${{ parameters.env }}-sp-provision"
